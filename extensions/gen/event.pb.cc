// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"

#include <algorithm>

#include "extensions/google/protobuf/stubs/common.h"
#include "extensions/google/protobuf/stubs/once.h"
#include "extensions/google/protobuf/io/coded_stream.h"
#include "extensions/google/protobuf/wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace nwapi {
namespace protocol {

const std::string* kEmptyString = new std::string;

void protobuf_ShutdownFile_event_2eproto() {
  delete KeyEvent::default_instance_;
  delete TextEvent::default_instance_;
  delete MouseEvent::default_instance_;
  delete ClipboardEvent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_event_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  KeyEvent::default_instance_ = new KeyEvent();
  TextEvent::default_instance_ = new TextEvent();
  MouseEvent::default_instance_ = new MouseEvent();
  ClipboardEvent::default_instance_ = new ClipboardEvent();
  KeyEvent::default_instance_->InitAsDefaultInstance();
  TextEvent::default_instance_->InitAsDefaultInstance();
  MouseEvent::default_instance_->InitAsDefaultInstance();
  ClipboardEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_event_2eproto_once_);
void protobuf_AddDesc_event_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_event_2eproto_once_,
                 &protobuf_AddDesc_event_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;
#endif

// ===================================================================

bool KeyEvent_LockStates_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeyEvent_LockStates KeyEvent::LOCK_STATES_CAPSLOCK;
const KeyEvent_LockStates KeyEvent::LOCK_STATES_NUMLOCK;
const KeyEvent_LockStates KeyEvent::LockStates_MIN;
const KeyEvent_LockStates KeyEvent::LockStates_MAX;
const int KeyEvent::LockStates_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int KeyEvent::kPressedFieldNumber;
const int KeyEvent::kUsbKeycodeFieldNumber;
const int KeyEvent::kLockStatesFieldNumber;
#endif  // !_MSC_VER

KeyEvent::KeyEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void KeyEvent::InitAsDefaultInstance() {
}

KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void KeyEvent::SharedCtor() {
  _cached_size_ = 0;
  pressed_ = false;
  usb_keycode_ = 0u;
  lock_states_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent::~KeyEvent() {
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyEvent& KeyEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_event_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
#endif
  return *default_instance_;
}

KeyEvent* KeyEvent::default_instance_ = NULL;

KeyEvent* KeyEvent::New() const {
  return new KeyEvent;
}

void KeyEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pressed_ = false;
    usb_keycode_ = 0u;
    lock_states_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool pressed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pressed_)));
          set_has_pressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usb_keycode;
        break;
      }

      // optional uint32 usb_keycode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usb_keycode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usb_keycode_)));
          set_has_usb_keycode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lock_states;
        break;
      }

      // optional uint32 lock_states = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_states_)));
          set_has_lock_states();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool pressed = 2;
  if (has_pressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pressed(), output);
  }

  // optional uint32 usb_keycode = 3;
  if (has_usb_keycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usb_keycode(), output);
  }

  // optional uint32 lock_states = 4 [default = 0];
  if (has_lock_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lock_states(), output);
  }

}

int KeyEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool pressed = 2;
    if (has_pressed()) {
      total_size += 1 + 1;
    }

    // optional uint32 usb_keycode = 3;
    if (has_usb_keycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usb_keycode());
    }

    // optional uint32 lock_states = 4 [default = 0];
    if (has_lock_states()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_states());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyEvent*>(&from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pressed()) {
      set_pressed(from.pressed());
    }
    if (from.has_usb_keycode()) {
      set_usb_keycode(from.usb_keycode());
    }
    if (from.has_lock_states()) {
      set_lock_states(from.lock_states());
    }
  }
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {

  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other != this) {
    std::swap(pressed_, other->pressed_);
    std::swap(usb_keycode_, other->usb_keycode_);
    std::swap(lock_states_, other->lock_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KeyEvent::GetTypeName() const {
  return "nwapi.protocol.KeyEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int TextEvent::kTextFieldNumber;
#endif  // !_MSC_VER

TextEvent::TextEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextEvent::InitAsDefaultInstance() {
}

TextEvent::TextEvent(const TextEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextEvent::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextEvent::~TextEvent() {
  SharedDtor();
}

void TextEvent::SharedDtor() {
  if (text_ != kEmptyString) {
    delete text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TextEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextEvent& TextEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_event_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
#endif
  return *default_instance_;
}

TextEvent* TextEvent::default_instance_ = NULL;

TextEvent* TextEvent::New() const {
  return new TextEvent;
}

void TextEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

}

int TextEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextEvent*>(&from));
}

void TextEvent::MergeFrom(const TextEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
}

void TextEvent::CopyFrom(const TextEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent::IsInitialized() const {

  return true;
}

void TextEvent::Swap(TextEvent* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextEvent::GetTypeName() const {
  return "nwapi.protocol.TextEvent";
}


// ===================================================================

bool MouseEvent_MouseButton_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MouseEvent_MouseButton MouseEvent::BUTTON_UNDEFINED;
const MouseEvent_MouseButton MouseEvent::BUTTON_LEFT;
const MouseEvent_MouseButton MouseEvent::BUTTON_MIDDLE;
const MouseEvent_MouseButton MouseEvent::BUTTON_RIGHT;
const MouseEvent_MouseButton MouseEvent::BUTTON_MAX;
const MouseEvent_MouseButton MouseEvent::MouseButton_MIN;
const MouseEvent_MouseButton MouseEvent::MouseButton_MAX;
const int MouseEvent::MouseButton_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MouseEvent::kXFieldNumber;
const int MouseEvent::kYFieldNumber;
const int MouseEvent::kButtonFieldNumber;
const int MouseEvent::kButtonDownFieldNumber;
const int MouseEvent::kWheelDeltaXFieldNumber;
const int MouseEvent::kWheelDeltaYFieldNumber;
const int MouseEvent::kWheelTicksXFieldNumber;
const int MouseEvent::kWheelTicksYFieldNumber;
const int MouseEvent::kDeltaXFieldNumber;
const int MouseEvent::kDeltaYFieldNumber;
#endif  // !_MSC_VER

MouseEvent::MouseEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MouseEvent::InitAsDefaultInstance() {
}

MouseEvent::MouseEvent(const MouseEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MouseEvent::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  button_ = 0;
  button_down_ = false;
  wheel_delta_x_ = 0;
  wheel_delta_y_ = 0;
  wheel_ticks_x_ = 0;
  wheel_ticks_y_ = 0;
  delta_x_ = 0;
  delta_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MouseEvent::~MouseEvent() {
  SharedDtor();
}

void MouseEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MouseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MouseEvent& MouseEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_event_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
#endif
  return *default_instance_;
}

MouseEvent* MouseEvent::default_instance_ = NULL;

MouseEvent* MouseEvent::New() const {
  return new MouseEvent;
}

void MouseEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    button_ = 0;
    button_down_ = false;
    wheel_delta_x_ = 0;
    wheel_delta_y_ = 0;
    wheel_ticks_x_ = 0;
    wheel_ticks_y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    delta_x_ = 0;
    delta_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MouseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_button;
        break;
      }

      // optional .nwapi.protocol.MouseEvent.MouseButton button = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_button:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nwapi::protocol::MouseEvent_MouseButton_IsValid(value)) {
            set_button(static_cast< ::nwapi::protocol::MouseEvent_MouseButton >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_button_down;
        break;
      }

      // optional bool button_down = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_button_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_down_)));
          set_has_button_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_wheel_delta_x;
        break;
      }

      // optional float wheel_delta_x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_delta_x_)));
          set_has_wheel_delta_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_wheel_delta_y;
        break;
      }

      // optional float wheel_delta_y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_delta_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_delta_y_)));
          set_has_wheel_delta_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_wheel_ticks_x;
        break;
      }

      // optional float wheel_ticks_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_ticks_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_ticks_x_)));
          set_has_wheel_ticks_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_wheel_ticks_y;
        break;
      }

      // optional float wheel_ticks_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_ticks_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_ticks_y_)));
          set_has_wheel_ticks_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_delta_x;
        break;
      }

      // optional int32 delta_x = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_x_)));
          set_has_delta_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_delta_y;
        break;
      }

      // optional int32 delta_y = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_y_)));
          set_has_delta_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MouseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional .nwapi.protocol.MouseEvent.MouseButton button = 5;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->button(), output);
  }

  // optional bool button_down = 6;
  if (has_button_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->button_down(), output);
  }

  // optional float wheel_delta_x = 7;
  if (has_wheel_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->wheel_delta_x(), output);
  }

  // optional float wheel_delta_y = 8;
  if (has_wheel_delta_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->wheel_delta_y(), output);
  }

  // optional float wheel_ticks_x = 9;
  if (has_wheel_ticks_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wheel_ticks_x(), output);
  }

  // optional float wheel_ticks_y = 10;
  if (has_wheel_ticks_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->wheel_ticks_y(), output);
  }

  // optional int32 delta_x = 11;
  if (has_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->delta_x(), output);
  }

  // optional int32 delta_y = 12;
  if (has_delta_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->delta_y(), output);
  }

}

int MouseEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional .nwapi.protocol.MouseEvent.MouseButton button = 5;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional bool button_down = 6;
    if (has_button_down()) {
      total_size += 1 + 1;
    }

    // optional float wheel_delta_x = 7;
    if (has_wheel_delta_x()) {
      total_size += 1 + 4;
    }

    // optional float wheel_delta_y = 8;
    if (has_wheel_delta_y()) {
      total_size += 1 + 4;
    }

    // optional float wheel_ticks_x = 9;
    if (has_wheel_ticks_x()) {
      total_size += 1 + 4;
    }

    // optional float wheel_ticks_y = 10;
    if (has_wheel_ticks_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 delta_x = 11;
    if (has_delta_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_x());
    }

    // optional int32 delta_y = 12;
    if (has_delta_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_y());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MouseEvent*>(&from));
}

void MouseEvent::MergeFrom(const MouseEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_button_down()) {
      set_button_down(from.button_down());
    }
    if (from.has_wheel_delta_x()) {
      set_wheel_delta_x(from.wheel_delta_x());
    }
    if (from.has_wheel_delta_y()) {
      set_wheel_delta_y(from.wheel_delta_y());
    }
    if (from.has_wheel_ticks_x()) {
      set_wheel_ticks_x(from.wheel_ticks_x());
    }
    if (from.has_wheel_ticks_y()) {
      set_wheel_ticks_y(from.wheel_ticks_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_delta_x()) {
      set_delta_x(from.delta_x());
    }
    if (from.has_delta_y()) {
      set_delta_y(from.delta_y());
    }
  }
}

void MouseEvent::CopyFrom(const MouseEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEvent::IsInitialized() const {

  return true;
}

void MouseEvent::Swap(MouseEvent* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(button_, other->button_);
    std::swap(button_down_, other->button_down_);
    std::swap(wheel_delta_x_, other->wheel_delta_x_);
    std::swap(wheel_delta_y_, other->wheel_delta_y_);
    std::swap(wheel_ticks_x_, other->wheel_ticks_x_);
    std::swap(wheel_ticks_y_, other->wheel_ticks_y_);
    std::swap(delta_x_, other->delta_x_);
    std::swap(delta_y_, other->delta_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MouseEvent::GetTypeName() const {
  return "nwapi.protocol.MouseEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int ClipboardEvent::kMimeTypeFieldNumber;
const int ClipboardEvent::kDataFieldNumber;
#endif  // !_MSC_VER

ClipboardEvent::ClipboardEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClipboardEvent::InitAsDefaultInstance() {
}

ClipboardEvent::ClipboardEvent(const ClipboardEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClipboardEvent::SharedCtor() {
  _cached_size_ = 0;
  mime_type_ = const_cast< ::std::string*>(kEmptyString);
  data_ = const_cast< ::std::string*>(kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipboardEvent::~ClipboardEvent() {
  SharedDtor();
}

void ClipboardEvent::SharedDtor() {
  if (mime_type_ != kEmptyString) {
    delete mime_type_;
  }
  if (data_ != kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClipboardEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipboardEvent& ClipboardEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_event_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
#endif
  return *default_instance_;
}

ClipboardEvent* ClipboardEvent::default_instance_ = NULL;

ClipboardEvent* ClipboardEvent::New() const {
  return new ClipboardEvent;
}

void ClipboardEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mime_type()) {
      if (mime_type_ != kEmptyString) {
        mime_type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClipboardEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mime_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipboardEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mime_type = 1;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mime_type(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

}

int ClipboardEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mime_type = 1;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipboardEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipboardEvent*>(&from));
}

void ClipboardEvent::MergeFrom(const ClipboardEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mime_type()) {
      set_mime_type(from.mime_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void ClipboardEvent::CopyFrom(const ClipboardEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipboardEvent::IsInitialized() const {

  return true;
}

void ClipboardEvent::Swap(ClipboardEvent* other) {
  if (other != this) {
    std::swap(mime_type_, other->mime_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClipboardEvent::GetTypeName() const {
  return "nwapi.protocol.ClipboardEvent";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace nwapi

// @@protoc_insertion_point(global_scope)
